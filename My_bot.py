import telebot
from telebot import TeleBot
from telebot import types
import os

token='5525233414:AAFVldwNs5zJq3ikO-Z2BsNkqTbITkiOthw'
bot=telebot.TeleBot(token)

@bot.message_handler(commands=['start'])
def welcome(message):
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
  svaz = types.KeyboardButton("–°–æ—Ü—Å–µ—Ç–∏")
  video = types.KeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
  talk = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –∞–≤—Ç–æ—Ä—É")
  library = types.KeyboardButton("–ö–Ω–∏–≥–∏ –ø–æ IT")
  markup.add(svaz, video, talk, library)
  bot.send_message(message.chat.id,f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫",reply_markup=markup)

@bot.message_handler(commands=['send'])
def per(message):
    back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_back = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
    back_markup.add(btn_back)
    send_message = bot.send_message(message.chat.id,"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–∏–¥–µ—Ç –∞–≤—Ç–æ—Ä. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20 –º–µ–≥–∞–±–∞–π—Ç.", reply_markup=back_markup)
    bot.register_next_step_handler(send_message, talk_with1)

@bot.message_handler(commands=['social_network'])
def soc(message):
    smarkup = types.InlineKeyboardMarkup(row_width=1)
    tg = types.InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", "https://t.me/progatiktok")
    discord=types.InlineKeyboardButton("–î–∏—Å–∫–æ—Ä–¥ –∫–∞–Ω–∞–ª", "https://discord.gg/RpWywVhMSF")
    tiktok = types.InlineKeyboardButton("–¢–∏–∫-–¢–æ–∫", url="https://www.tiktok.com/@__programming__")
    smarkup.add(tg, discord,tiktok)
    bot.send_message(message.chat.id, "–í–æ—Ç –º–æ–∏ —Å–æ—Ü—Å–µ—Ç–∏:", reply_markup=smarkup)

@bot.message_handler(content_types=["text"])
def get_text(message):
  if message.text == '–°–æ—Ü—Å–µ—Ç–∏':
    smarkup = types.InlineKeyboardMarkup(row_width=1)
    tg = types.InlineKeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª", "https://t.me/progatiktok")
    discord=types.InlineKeyboardButton("–î–∏—Å–∫–æ—Ä–¥ –∫–∞–Ω–∞–ª", "https://discord.gg/RpWywVhMSF")
    tiktok = types.InlineKeyboardButton("–¢–∏–∫-–¢–æ–∫", url="https://www.tiktok.com/@__programming__")
    smarkup.add(tg, discord,tiktok)
    bot.send_message(message.chat.id, "–í–æ—Ç –º–æ–∏ —Å–æ—Ü—Å–µ—Ç–∏:", reply_markup=smarkup)
  if message.text == '–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã':
    smarkup = types.InlineKeyboardMarkup(row_width=1)
    tg = types.InlineKeyboardButton("Python", "https://drive.google.com/drive/folders/1a5Hq4KiZ4ohl_NL_NIpjweRwe74H3Llq?usp=sharing")
    discord=types.InlineKeyboardButton("C++", "https://drive.google.com/drive/folders/1J2xs-VHe5py-G_XSv6BJdb-FwREDlGZg?usp=sharing")
    smarkup.add(tg, discord)
    bot.send_message(message.chat.id, "–í–æ—Ç –º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=smarkup)
  if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –∞–≤—Ç–æ—Ä—É':
     back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
     btn_back = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
     back_markup.add(btn_back)
     send_message = bot.send_message(message.chat.id,"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–∏–¥–µ—Ç –∞–≤—Ç–æ—Ä. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 20 –º–µ–≥–∞–±–∞–π—Ç.", reply_markup=back_markup)
     bot.register_next_step_handler(send_message, talk_with1)
  if message.text=='–ö–Ω–∏–≥–∏ –ø–æ IT':
      markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
      svaz = types.KeyboardButton("Python")
      video = types.KeyboardButton("C++")
          #talk = types.KeyboardButton("C#")
      library = types.KeyboardButton("HTML –∏ CSS")
      otm=types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
      markup.add(svaz, video,library,otm)
      ms=bot.send_message(message.chat.id,f"–ü–æ–∂–∞–π–ª—É—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",reply_markup=markup)
      bot.register_next_step_handler(ms, books)



def dowland_file_bot(message, c, img, send):
    file_photo = bot.get_file(c)

    filename, file_extension = os.path.splitext(file_photo.file_path)

    img = img
    chisl = 1

    b=img+str(chisl)+file_extension

    while os.path.exists(b)!=False:
        b = img+str(chisl)+file_extension
        chisl+=1

    save_photo = bot.download_file(file_photo.file_path)
    with open(b, 'wb') as new_file:
        new_file.write(save_photo)

    if message.chat.last_name == None:
        message.chat.last_name = "0"
    if message.chat.username == None:
        message.chat.username = "0"
    print(message.chat.username, " / ", message.chat.first_name, " ", message.chat.last_name, ":", " ", message.text,
          " !!! ", b, sep="", end=" /// ")
    with open('talk_with_autor.txt', 'a', encoding="utf-8") as f:
        s = ''.join((message.chat.username, " / ", message.chat.first_name, " ", message.chat.last_name, ":", " ", "0",
                     " !!! ", b, " /// "))
        f.write(s)

    send_message = bot.send_message(message.chat.id,f"–ê–≤—Ç–æ—Ä —É–≤–∏–¥–∏—Ç —ç—Ç–æ {send}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ!")
    bot.register_next_step_handler(send_message, talk_with1)
def talk_with1(message):
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            s(message)
        elif message.content_type == "photo":
            dowland_file_bot(message, message.photo[-1].file_id, "photo", "—Ñ–æ—Ç–æ")
        elif message.content_type == "video":
            dowland_file_bot(message, message.video.file_id, "video", "–≤–∏–¥–µ–æ")
        elif message.content_type == "text":
            talk_with2(message)
        elif message.content_type == "document":
            dowland_file_bot(message, message.document.file_id, "document", "—Ñ–∞–π–ª")
        else:
            send_message = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–∏–±–æ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ —Ñ–æ—Ç–æ, –ª–∏–±–æ –≤–∏–¥–µ–æ, –ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç!")
            bot.register_next_step_handler(send_message, talk_with1)
    except:
        print("ERROR1")
        with open("error.txt", "a", encoding="utf-8") as f:
            f.write("ERROR1\n")
        bot.send_message(message.chat.id, "–û–®–ò–ë–ö–ê, –ü–û–ü–†–û–ë–£–ô–¢–ï –ó–ê–ù–û–í–û!")

def reply_to_user(message):
    bot.send_message(message.chat.id, message.text)

def talk_with2(message):
    print(message.chat.username, " / ", message.chat.first_name, " ", message.chat.last_name, ":", " ", message.text, sep="")
    if message.chat.last_name == None:
        message.chat.last_name = "0"
    if message.chat.username == None:
        message.chat.username = "0"

    with open('talk_with_autor.txt', 'a', encoding="utf-8") as f:
        s = ''.join((message.chat.username, " / ", message.chat.first_name, " ", message.chat.last_name, ":", " ", message.text, "\n",))
        f.write(s)
    bot.send_message(message.chat.id, "–ê–≤—Ç–æ—Ä —É–≤–∏–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –≤—ã —É–∂–µ –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–æ–º")

def books(message):
    while message.text != '–û—Ç–º–µ–Ω–∞':
        if message.text=="–û—Ç–º–µ–Ω–∞":
            s(message)
        elif message.text=='Python':
            smarkup = types.InlineKeyboardMarkup(row_width=1)
            first=types.InlineKeyboardButton('–û—Å–Ω–æ–≤—ã Python.','https://t.me/c/1679219435/9')
            second=types.InlineKeyboardButton('–ü—Ä–æ—Å—Ç–æ–π Python','https://t.me/c/1679219435/8')
            smarkup.add(first, second)
            bot.send_message(message.chat.id, "–í–æ—Ç —É—á–µ–±–Ω–∏–∫–∏ –ø–æ Python:", reply_markup=smarkup)
            break
        elif message.text=='C++':
            mmarkup = types.InlineKeyboardMarkup(row_width=1)
            first=types.InlineKeyboardButton('–ò–∑—É—á–∞–µ–º C++ —á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä','https://t.me/c/1679219435/7')
            second=types.InlineKeyboardButton(' C++20 STL Cookbook','https://t.me/c/1679219435/10')
            mmarkup.add(first, second)
            bot.send_message(message.chat.id, "–í–æ—Ç —É—á–µ–±–Ω–∏–∫–∏ –ø–æ C++:", reply_markup=mmarkup)
            break
        elif message.text=="HTML –∏ CSS":
            fmarkup = types.InlineKeyboardMarkup(row_width=1)
            first=types.InlineKeyboardButton('üìî –û—Ç–∑—ã–≤—á–∏–≤—ã–π –¥–∏–∑–∞–π–Ω –Ω–∞ HTML5 –∏ CSS3 –¥–ª—è –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤. 3-–µ –∏–∑–¥.','https://t.me/c/1679219435/11')
            fmarkup.add(first)
            bot.send_message(message.chat.id, "–í–æ—Ç —É—á–µ–±–Ω–∏–∫–∏ –ø–æ HTML –∏ CSS:", reply_markup=fmarkup)
            break
    s(message)
def s(message):
  markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
  svaz = types.KeyboardButton("–°–æ—Ü—Å–µ—Ç–∏")
  video = types.KeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
  talk = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –∞–≤—Ç–æ—Ä—É")
  library = types.KeyboardButton("–ö–Ω–∏–≥–∏ –ø–æ IT")
  markup.add(svaz, video, talk, library)
  bot.send_message(message.chat.id,f"–ù–∞–∂–º–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫",reply_markup=markup)

#RUN
bot.polling(none_stop=True)
